class Solution{

public static void getPairs(List<Integer> arr, long sum, ArrayList<ArrayList<Integer>> set ) 
    {  
        for (int i = 0; i < arr.size(); i++) 
            for (int j = i + 1; j < arr.size(); j++) 
            {
		// Initialize the list with the pair found and also its reverse.
                ArrayList<Integer> s2 = new ArrayList<Integer>();
                ArrayList<Integer> s3 = new ArrayList<Integer>();

                if ((arr.get(i) + arr.get(j)) == sum) 
                {
                    s2.add(arr.get(i));s3.add(arr.get(j));
                    s2.add(arr.get(j));s3.add(arr.get(i));
                }

		// Check if the pair found already exists in the final set, if not, add
                if(set.contains(s2) == false && set.contains(s3) == false )
                    set.add(s2);

            }
                 
    } 

public static int stockPairs(List<Integer> stocksProfit, long target)
 {
    // Base condition
    if(target == 0 || stocksProfit.size() == 0)
        return 0;
	
    // Initialize a 2D ArrayList to store the pairs that are formed.
    ArrayList<ArrayList<Integer>> set = new ArrayList<ArrayList<Integer>>();

    // Call getPairs(), pass 2D ArrayList as parameter.
    getPairs(stocksProfit,target,set);

    // Return size of the list - the number of pairs	
    return set.size() -1;
 }

}

class main{
	// Write a main function to read data
	// Create object of Solution Class
	// Pass array as a List<Integer> and the target sum as Long Target to stockPairs()
	// Return type is int.
 
}